(ns apogee.charts
  (:require [apogee.svg :as svg]
            [apogee.xml :as xml]
            [apogee.util :as util]
            [tailrecursion.hoplon.svg :as hsvg]))

(def default-chart-props
  {:x 50, :y 50,
   :height 500, :width 750,
   :xmin 0, :xmax 100,
   :ymin 0, :ymax 100,
   :grid-lines 10,
   :label-points? false,
   :points []
   :major-grid-color (svg/rgb 255 255 255)
   :minor-grid-color (svg/rgb 245 245 245)
   :background-color (svg/rgb 225 225 225)
   :major-grid-width 2
   :minor-grid-width 1
   :axis-font-family "Verdana"
   :axis-font-size "12px"
   :axis-number-format 1
   :label-font-family "Verdana"
   :label-font-size "10px"
   :label-number-format 1})

(defn translate
  ([x] (str "translate(" x ")"))
  ([x y] (str "translate(" x "," y ")")))


(defn add-style [elem & props]
  (let [styling (when (seq props)
                  (reduce (fn [s [k v]]
                            (str s " " (name k) ": "
                                 (if (keyword? v)
                                   (name v)
                                   v)
                                 "; "))
                          "" props))]
    (elem :style styling)))

(defelem chart-background
  [{:keys [height width background-color
           major-grid-color major-grid-width]} _]
  (hsvg/rect :x 0 :y 0 :height height :width width
             :css {:fill background-color
                   :stroke major-grid-color
                   :stroke-width major-grid-width}))

(defelem x-grid
  [{:keys [height width
           xmin xmax
           grid-lines
           major-grid-color minor-grid-color
           major-grid-width minor-grid-width]} _]
  (let [grid-x-space (/ width grid-lines)]
    (for [i (range 1 grid-lines)]
      (hsvg/line :x1 (* i grid-x-space) :y1 0 :x2 (* i grid-x-space) :y2 height
                 :css {:stroke (if (even? i) major-grid-color minor-grid-color)
                       :stroke-width (if (even? i) major-grid-width minor-grid-width)}))))

(defelem y-grid
  [{:keys [height width
           ymin ymax
           grid-lines
           major-grid-color minor-grid-color
           major-grid-width minor-grid-width]} _]
  (let [grid-y-space (/ height grid-lines)]
    (for [i (range 1 grid-lines)]
      (hsvg/line :x1 0 :y1 (* i grid-y-space) :x2 width :y2 (* i grid-y-space)
                 :css {:stroke (if (even? i) major-grid-color minor-grid-color)
                       :stroke-width (if (even? i) major-grid-width minor-grid-width)}))))

(defelem x-axis
  [{:keys [height width
           xmin xmax
           grid-lines
           axis-font-family axis-font-size
           axis-number-format]} _]
  (let [grid-x-space (/ width grid-lines)]
    (for [i (range 0 (inc grid-lines)) :when (even? i)]
      (hsvg/text :x (* i grid-x-space) :y (+ 20 height)
                 (util/format axis-number-format
                              (svg/translate-value (* i grid-x-space)
                                                   0 width xmin xmax))
                 :css {:fill (svg/rgb 150 150 150)
                       :font-family axis-font-family
                       :font-size axis-font-size
                       :text-anchor :middle}))))

(defelem y-axis
  [{:keys [height width
           ymin ymax
           grid-lines
           axis-font-family axis-font-size
           axis-number-format]} _]
  (let [grid-y-space (/ height grid-lines)]
    (for [i (range 1 (inc grid-lines)) :when (even? i)]
      (hsvg/text :x 0 :y (- height (* i grid-y-space))
                 (util/format axis-number-format
                              (svg/translate-value (* i grid-y-space)
                                                   0 height ymin ymax))
                 :css {:fill (svg/rgb 150 150 150)
                       :font-family axis-font-family
                       :font-size axis-font-size
                       :text-anchor :end
                       :alignment-baseline :middle}))))

(defelem xy-plot
  [attrs content]
  (let [{x :x y :y :as props} (merge default-chart-props attrs)]
    (hsvg/g :transform (translate x y)
      (chart-background props)
      (x-grid props)
      (y-grid props)
      (x-axis props)
      (y-axis props))))

(defn point-label
  [{:keys [label-font-family
           label-font-size
           label-number-format]}
   x* y* x y r & options]
  (-> (hsvg/text :x (+ x* r) :y (- y* r)
                 (str (util/format label-number-format x) ","
                      (util/format label-number-format y)))
      (add-style :fill (svg/rgb 100 100 150)
                 :font-family label-font-family
                 :font-size label-font-size)))

(defn add-point
  [chart x y r & options]
  (let [props (:properties chart)
        {:keys [height width
                xmin xmax
                ymin ymax
                label-points?]} props
        x* (svg/translate-value x xmin xmax 0 width)
        y* (- height (svg/translate-value y ymin ymax 0 height))
        point (apply svg/circle x* y* r options)
        label (point-label props x* y* x y r)]
    (-> chart
        (update-in [:points] (fn [old] (conj old (apply assoc {:x x, :y y, :r r} options))))
        (assoc :svg (concat (:svg chart) (if label-points? [point label] [point]))))))

(defn points->xy
  [points]
  (reduce (fn [[x y] [p1 p2]] [(conj x p1) (conj y p2)])
          [[] []] points))

(defn xy->points
  [[x y]]
  (map (fn [p1 p2] [p1 p2]) x y))

(defn add-points
  [chart data & {:keys [size sizes colors transpose-data? fill]}]
  (let [points (if transpose-data? (xy->points data) data)
        sizes (or sizes (repeat (count points) (or size 3)))
        colors (or colors (repeat (count points) (or fill (svg/rgb 0 0 255))))
        data (map (fn [[x y] r color] [x y r color]) points sizes colors)]
    (reduce (fn [chart-svg [x y r color]] (add-point chart-svg x y r :fill color))
            chart data)))

#_(defn emit-svg
  [chart]
  (xml/emit (svg/svg (:svg chart))))

