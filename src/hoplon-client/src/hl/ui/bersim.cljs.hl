(ns ui.bersim
  (:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require [tailrecursion.javelin :refer :all]
            [tailrecursion.hoplon :refer :all]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [ui.elements :as uie]
            [bootstrap-util :as bs]))

(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:signed-in-as {:lang/de "Eingeloggt als "
                          :lang/en "Signed in as "}
           :username {:lang/de "Nutzername"
                      :lang/en "Username"}
           :password {:lang/de "Passwort"
                      :lang/en "Password"}}
          [element (or lang :lang/de)] "UNKNOWN element"))

(defn selected-farm-id
  []
  )


(defn bersim-pane
  []
  (let [[farm-id plot-id until-date-id] (repeatedly gensym)]
    (div
      :id "bersim-pane"
      :do-toggle (cell= (= s/route "#/bersim"))

      (bs/form
        :opts [:horizontal]
        :name "test-data-form"

        (bs/form-group
          (bs/control-label :col [:sm 2] :for "farm-id" "Betrieb")
          (div
            :col [:xs 3]
            (select
              :id farm-id
              :class "form-control"
              :on-change #(swap! s/local-state assoc [:bersim :selected-farm-id] (val-id farm-id))
              (loop-tpl :bindings [[_ {fid :farm/id
                                       name :farm/name}] s/farms]
                        (uie/create-option fid (:farm/id @s/selected-farm) name)))))

        (bs/form-group
          (control-label :col [:sm 2] :for "plot" "Schlag")
          (div
            :col [:xs 3]
            (select
              :id plot-id
              :class "form-control"
              :on-change #(swap! s/local-state assoc-in [:bersim :selected-plot-id] (val-id plot-id))
              (loop-tpl :bindings [[_ {pid :plot/id
                                       name :plot/name}] s/plots]
                        (uie/create-option pid (:plot/id @s/selected-plot) name)))))


        (bs/form-group
          (bs/control-label :col [:sm 2] :for "until-day" "Rechnen bis Datum")
          (div
            :col [:xs 2]
            (input
              :id until-date-id
              :class "form-control"
              :type "date"
              :placeholder "Datum"
              :value (cell= (util/js-date-time->date-str s/until-date))
              :on-change #(swap! s/state assoc :until-date (js/Date. (val-id until-date-id))))))


        (fieldset
          (legend "Beregnungsdaten")
          (bs/form-group
            (div :id "donations"
                 (loop-tpl :bindings [[row-no {:keys [day month amount]}] (cell= (util/indexed s/donations))]
                           (uie/create-irrigation-inputs row-no day month amount)))
            (apply uie/create-irrigation-inputs nil (cell-map (fn [[_ v]] v) s/temp-donations))))

        (hr)

        (bs/form-group
          (bs/control-label
            :col [:sm 4]
            :for "result"
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click #(apply s/calculate-csv ((juxt :selected-plot-id :until-date :donations) @s/state))
              :value "Berechnen & CSV")
            (div :css {:height "5px"})
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click #(apply s/simulate-csv ((juxt :selected-plot-id :until-date :donations) @s/state))
              :value "Simulieren & CSV")
            (div :css {:height "5px"})
            (a
              :class "btn btn-primary btn-lg"
              :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
              "Analyse Excel-File herunterladen"))
          (div
            :col [:xs 8]
            (textarea
              :id "result"
              :class "form-control"
              :rows "20" ;:cols "150"
              :placeholder "Berechnungsergebnis wird hier angezeigt werden ..."
              :value (cell= s/csv-result))))))))