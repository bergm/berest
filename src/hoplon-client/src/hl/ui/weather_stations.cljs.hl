(ns ui.weather-stations
  #_(:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require #_[tailrecursion.javelin :refer :all]
            #_[tailrecursion.hoplon :refer :all]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [ui.elements :as uie]
            [bootstrap-util :as bs]
            #_[cljs-time.coerce :as cstcoe]))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:name-label {:lang/de "Name"
                        :lang/en "Name"}
           :name-placeholder {:lang/de "Name der Wetterstation"
                              :lang/en "Name of weather station"}
           :lat-label {:lang/de "Breitengrad"
                        :lang/en "Latitude"}
           :lat-placeholder {:lang/de "Breitengrad"
                              :lang/en "Latitude"}
           :long-label {:lang/de "Längengrad"
                        :lang/en "Longitude"}
           :long-placeholder {:lang/de "Längengrad"
                              :lang/en "Longitude"}

           :show-data {:lang/de "Daten anzeigen"
                       :lang/en "Show data"}
           :edit {:lang/de "Ändern"
                  :lang/en "Edit"}
           :save-edit {:lang/de "Änderungen speichern"
                       :lang/en "Save changes"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn weather-stations-pane
  []
  (div
    :id "weather-stations-pane"
    :do-toggle (cell= (= s/route "#/climate"))

    (bs/form
      :opts [:horizontal]
      :name "weather-stations-form"

      (loop-tpl
        :bindings [{id :weather-station/id
                    name :weather-station/name
                    years :available-years
                    {lat :geo-coord/latitude
                     long :geo-coord/longitude} :weather-station/geo-coord}
                   (cell= (sort-by #(if-let [n (:weather-station/name %)] n (:weather-station/id %))
                                   (:weather-stations s/state)))]
        :bind-ids [name-input lat-input long-input chart-id years-id]

        (let [data-visible? (cell false)
              edit? (cell false)
              no-edit? (cell= (not edit?))
              selected-data (cell nil)
              _ (cell= (println "selected-data: " (pr-str selected-data)))

              ;;_ (cell= (println "selected-years: " (pr-str selected-years)))
              #_#__ (cell= (let [selected-years* (or selected-years #{(first years)})
                             _ (println "selected-years*: " (pr-str selected-years*))
                             cached-data (get s/weather-station-data id)
                             _ (println "cached-data: " (pr-str cached-data))
                             years-to-fetch (if cached-data
                                              (filter (fn [year] (not (nil? (get cached-data year))))
                                                      selected-years*)
                                              selected-years*)
                             _ (println "years-to-fetch: " (pr-str years-to-fetch))]
                         (when (not (empty? years-to-fetch))
                           (println "would call (load-weather-station-data" id years-to-fetch)
                           #_(s/load-weather-station-data id years-to-fetch))))

              chart-config {:chart {:renderTo chart-id
                                    :defaultSeriesType "spline"}
                            :title {:text "Wetter"
                                    :x -20}
                            :subtitle {:text "Source: DWD Station xy"
                                       :x -20}
                            :xAxis {:type "datetime"
                                    :labels {:format "{value: %d.%m.%Y}"
                                             :rotation 45
                                             :align "left"}}
                            :yAxis {:title {:text "Temperature (°C)"}
                                    #_:plotLines #_[{:value 0
                                                 :width 1
                                                 :color "#808080"}]}
                            :tooltip {:valueSuffix "°C"}
                            :legend {:layout "vertical"
                                     :align "right"
                                     :verticalAlign "middle"
                                     :borderWidth 0}
                            :series [{:name "T-min"
                                      :data []}
                                     {:name "T-max"
                                      :data []}
                                     {:name "T-avg"
                                      :data []}]}
              _ (with-timeout 0 (js/Highcharts.Chart. (clj->js chart-config)))


              measured-data (cell= (filter #(not (:weather-data/prognosis-data? (second %))) selected-data))
              _ (cell= (println "measured-data: " (pr-str measured-data)))

              tavg (cell= (->> measured-data
                               (map second ,,,)
                               flatten
                               (mapv (fn [{date :weather-data/date
                                           t :weather-data/average-temperature}]
                                       [(.getTime date) t])
                                 ,,,)
                               (sort-by first ,,,)))

              _ (cell= (some-> chart-id by-id js/jQuery .highcharts .-series first (.setData (clj->js tavg))))

              ]
          (div
            (button
              ;:toggle no-edit?
              :style "float:right"
              :class "btn btn-primary"
              :click #(swap! edit? not)
              (text "~(vocab :edit s/lang)"))
            (button
              :toggle edit?
              :style "float:right"
              :class "btn btn-danger"
              :click #()
              (text "~(vocab :save-edit s/lang)"))

            (bs/form-group
              (bs/control-label :col [:sm 2] :for name-input (text "~(vocab :name-label s/lang)"))
              (div
                :col [:xs 3]
                (p :toggle no-edit? :class "form-control-static" (text "~{name}"))
                (input
                  :id name-input
                  :toggle edit?
                  :class "form-control"
                  :type "text"
                  :placeholder (cell= (vocab :name-placeholder s/lang))
                  :value name
                  :on-change #())))

            (bs/form-group
              (bs/control-label :col [:sm 2] :for lat-input (text "~(vocab :lat-label s/lang)"))
              (div
                :col [:xs 3]
                (p :toggle no-edit? :class "form-control-static" (text "~{lat}"))
                (input
                  :id lat-input
                  :toggle edit?
                  :class "form-control"
                  :type "number"
                  :placeholder (cell= (vocab :lat-placeholder s/lang))
                  :value lat
                  :on-change #())))

            (bs/form-group
              (bs/control-label :col [:sm 2] :for "long-input" (text "~(vocab :long-label s/lang)"))
              (div
                :col [:xs 3]
                (p :toggle no-edit? :class "form-control-static" (text "~{long}"))
                (input
                  :id long-input
                  :toggle edit?
                  :class "form-control"
                  :type "number"
                  :placeholder (cell= (vocab :long-placeholder s/lang))
                  :value long
                  :on-change #())))

            (div
              (span
                :class "glyphicon glyphicon-plus"
                :toggle (cell= (not data-visible?))
                :on-click #(reset! data-visible? true))
              (span
                :toggle data-visible?
                :class "glyphicon glyphicon-minus"
                :click #(reset! data-visible? false))
              (span (text " ~(vocab :show-data s/lang)"))



              (div
                :toggle data-visible?

                (select
                  :id years-id
                  :class "form-control"
                  :multiple "multiple"
                  :on-change #(s/load-weather-station-data selected-data id (map js/parseInt (val-id years-id)))
                  (loop-tpl
                    :bindings [year years]
                    (uie/create-option year (first @years))))

                (div :id chart-id)

                #_(button
                  :on-click #(s/load-weather-station-data @id)
                  "click me")
                )
              )






            (hr)))









        )


      )


    ))