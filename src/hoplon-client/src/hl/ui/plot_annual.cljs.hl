(ns ui.plot-annual
  (:require [de.zalf.berest.client.hoplon.util :as util]
            [ui.elements :as uie]
            [ui.technology :as technology]
            [ui.addresses :as addr]
            [bootstrap-util :as bs]
            [cljs-time.core :as cstc]
            [cljs-time.format :as cstf]
            [cljs-time.coerce :as cstcoe]
            [de.zalf.berest.client.hoplon.state :as s]))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:year-label {:lang/de "Jahr"
                        :lang/en "Year"}
           :year-placeholder {:lang/de "Jahr der Schlagnutzung"
                              :lang/en "Year of plot use"}

           :abs-day-of-initial-soil-moisture-measurement-label {:lang/de "Tag der Bodenfeuchtemessung"
                                                                :lang/en "Day of soil moisture measurement"}
           :abs-day-of-initial-soil-moisture-measurement-placeholder {:lang/de "Tag"
                                                                      :lang/en "day"}

           :initial-soil-moistures-label {:lang/de "Bodenfeuchten"
                                 :lang/en "Soil moistures"}

           :soil-moisture-data-fieldset-label {:lang/de "Bodenfeuchtedaten"
                                               :lang/en "Soil moisture data"}

           :initial-sm-unit-label {:lang/de "Bodenfeuchte Einheit"
                                       :lang/en "Soil moisture unit"}

           :pFK {:lang/de "% FK"
                 :lang/en "% FC"}

           :pNFK {:lang/de "% NFK"
                 :lang/en "% NFC"}

           :volP {:lang/de "Vol.%"
                 :lang/en "vol.%"}

           :mm {:lang/de "mm"
                :lang/en "mm"}

           :technology-fieldset-label {:lang/de "Technologiedaten"
                                       :lang/en "Technology data"}

           :technology-select-label {:lang/de "Technologieauswahl"
                                     :lang/en "Technology selection"}

           :crop-instances-fieldset-label {:lang/de "Angebaute Fruchtarten"
                                       :lang/en "Applied crops"}

           :new-crop-instance-button-label {:lang/de "Neue Fruchtart"
                                     :lang/en "New crop"}

           :crop-instance-select-label {:lang/de "Fruchtartauswahl"
                                     :lang/en "Crop selection"}

           :donations-fieldset-label {:lang/de "Bewässerungsdaten"
                                      :lang/en "Irrigation data"}

           :donations-label {:lang/de "Bewässerungsgaben"
                             :lang/en "Irrigation donations"}


           :ci-name-label {:lang/de "Name"
                             :lang/en "Name"}

           :dc-assertions-label {:lang/de "DC Stadien melden"
                                 :lang/en "DC states"}



           :show-data {:lang/de "Daten anzeigen"
                       :lang/en "Show data"}

           :edit-plot-button-label {:lang/de "Ändern"
                                      :lang/en "Edit"}

           :add-layer-label {:lang/de "Schicht hinzufügen"
                             :lang/en "Add layer"}
           :remove-layer-label {:lang/de "Schicht entfernen"
                                :lang/en "Remove layer"}
           :depth-placeholder {:lang/de "Tiefe [cm]"
                               :lang/en "Depth [cm]"}
           :value-placeholder {:lang/de "Wert"
                               :lang/en "Value"}


           :chart-header {:lang/de "Wetterdaten"
                          :lang/en "Weather data"}
           :chart-subheader {:lang/de "Quelle: DWD Station"
                             :lang/en "Source: DWD station"}

           :dc {:lang/de "BEREST DC Code"
                :lang/en "BEREST DC code"}

           :cover-degree {:lang/de "Bedeckungsgrad"
                          :lang/en "Cover degree"}

           :extraction-depth {:lang/de "Entzugstiefe"
                              :lang/en "Extraction depth"}

           :aet-pet {:lang/de "Quotient AET/PET"
                     :lang/en "Quotient AET/PET"}

           :transpiration-factor {:lang/de "Transpirations-Faktor"
                                  :lang/en "Transpiration factor"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))

(defelem
  create-ka5-inputs
  [{{:keys [row-no row-action!
            depth depth!
            value value!]} :fields
    opts :opts
    :as attrs} kids]

  (let [[depth-id value-id] (repeatedly gensym)]
    ((div
       :class "row"
       (div
        :col [:xs 4]
        (div
          :class "input-group"
          (input
            :id depth-id
            :class "form-control"
            :type "number"
            :placeholder (cell= (vocab :depth-placeholder s/lang))
            :step 1
            :min 0
            :max 200
            :value depth
            :on-change #(depth! (js/parseInt (val-id depth-id))))
          (span :class "input-group-addon" "cm")))

       (div
         :col [:xs 4]
         (select
           :id value-id
           :class "form-control"
           :on-change #(value! (val-id value-id))
           (option "")
           (for #_loop-tpl
             #_:bindings [[name _] (sort-by #(-> first :soil.type.ka5/name) @s/ka5-soil-types)]
             (option :value name
                     :selected (cell= (= name value))
                     (text "~{name}")))))

       (div
         :col [:xs 4]
         (input
          :class (cell= {:btn true
                         :btn-danger (not (nil? row-no))
                         :btn-warning (nil? row-no)})
          :type "button"
          :value (cell= (if row-no (vocab :remove-layer-label s/lang) (vocab :add-layer-label s/lang)))
          :on-click #(row-action! (some-> row-no deref)))))
     (dissoc attrs :fields :opts) kids)))

(defelem
  create-fc-pwp-inputs
  [{{:keys [row-no row-action!
            fc-pwp-unit
            depth depth!
            value value!]} :fields
    opts :opts
    :as attrs} kids]

  (let [[depth-id value-id] (repeatedly gensym)]
    ((div
       :class "row"
       (div
         :col [:xs 4]
         (div
           :class "input-group"
           (input
             :id depth-id
             :class "form-control"
             :type "number"
             :placeholder (cell= (vocab :depth-placeholder s/lang))
             :step 1
             :min 0
             :max 200
             :value depth
             :on-change #(depth! (js/parseInt (val-id depth-id))))
           (span :class "input-group-addon" "cm")))

       (div
         :col [:xs 4]
         (div
           :class "input-group"
           (input
             :id value-id
             :class "form-control"
             :type "number"
             :placeholder (cell= (vocab :value-placeholder s/lang))
             :step 0.1
             :min 0
             :value value
             :on-change #(value! (js/parseFloat (val-id value-id))))
           (span :class "input-group-addon" (text "~{fc-pwp-unit}"))))

       (div
         :col [:xs 4]
         (input
           :class (cell= {:btn true
                          :btn-danger (not (nil? row-no))
                          :btn-warning (nil? row-no)})
           :type "button"
           :value (cell= (if row-no (vocab :remove-layer-label s/lang) (vocab :add-layer-label s/lang)))
           :on-click #(row-action! (some-> row-no deref)))))
     (dissoc attrs :fields :opts) kids)))

(defelem
  plot-annual
  [{{:keys [db-id

            year
            year!

            abs-day-of-initial-soil-moisture-measurement
            abs-day-of-initial-soil-moisture-measurement!

            initial-soil-moistures

            initial-sm-unit
            initial-sm-unit!

            technology

            crop-instances

            donations]} :fields
    {:keys [edit? label-cols value-cols]} :opts
    :as attrs}
   kids]
  (let [edit? (cell (if (cell? edit?) @edit? edit?))
        no-edit? (cell= (not edit?))
        [plot-annual-form-name
         year-id
         abs-day-of-initial-soil-moisture-measurement-id
         initial-soil-moistures-id
         initial-sm-unit-id
         technology-id
         technology-select-id
         crop-instances-id
         new-crop-instance-id
         donations-id] (repeatedly gensym)]
    ((div
       (bs/form
         :opts [:horizontal]
         :name plot-annual-form-name

         (button
           :style "float:right"
           :class "btn btn-info"
           :click #(swap! edit? not)
           (text "~(vocab :edit-plot-button-label s/lang)"))

         (bs/form-group
           (bs/control-label :col [:sm label-cols] :for year-id (text "~(vocab :year-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{year}"))
             (input
               :id year-id
               :toggle edit?
               :class "form-control"
               :type "number"
               :step 1
               :min 1961
               :max 2100
               :placeholder (cell= (vocab :year-placeholder s/lang))
               :value year
               :on-change #(year! (js/parseFloat (val-id year-id))))
             ))

         (fieldset
           (legend (text "~(vocab :soil-moisture-data-fieldset-label s/lang)"))

           (bs/form-group
             (bs/control-label :col [:sm label-cols] :for abs-day-of-initial-soil-moisture-measurement-id
                               (text "~(vocab :abs-day-of-initial-soil-moisture-measurement-label s/lang)"))
             (div
               :col [:xs value-cols]
               (p :toggle no-edit? :class "form-control-static" (text "~{abs-day-of-initial-soil-moisture-measurement-id}"))
               (input
                 :id abs-day-of-initial-soil-moisture-measurement-id
                 :toggle edit?
                 :class "form-control"
                 :type "date"
                 :placeholder (cell= (vocab :abs-day-of-initial-soil-moisture-measurement-id-placeholder s/lang))
                 :value (cell= (->> (util/doy->cljs-time-date abs-day-of-initial-soil-moisture-measurement year)
                                    (cstf/unparse (cstf/formatters :date) ,,,)))
                 :on-change #(abs-day-of-initial-soil-moisture-measurement!
                              (util/cljs-time-date->doy (cstf/parse (cstf/formatters :date)
                                                                    (val-id abs-day-of-initial-soil-moisture-measurement-id)))))))


           (bs/form-group
             :toggle edit? ;we don't have to show this for read-only mode
             (bs/control-label :col [:sm label-cols] :for initial-sm-unit-id
                               (text "~(vocab :initial-sm-unit-label s/lang)"))
             (div
               :col [:xs 2]
               (select
                 :disabled "disabled"
                 :id initial-sm-unit-id
                 :class "form-control"
                 :on-change #(initial-sm-unit! (keyword (val-id initial-sm-unit-id)))
                 (option :value "soil-moisture.unit/pFK"
                         :selected (cell= (= initial-sm-unit :soil-moisture.unit/pFK))
                         (text "~(vocab :pFK s/lang)"))
                 (option :value "soil-moisture.unit/pNFK"
                         :selected (cell= (= initial-sm-unit :soil-moisture.unit/pNFK))
                         (text "~(vocab :pNFK s/lang)"))
                 (option :value "soil-moisture.unit/volP"
                         :selected (cell= (= initial-sm-unit :soil-moisture.unit/volP))
                         (text "~(vocab :volP s/lang)"))
                 (option :value "soil-moisture.unit/mm"
                         :selected (cell= (= initial-sm-unit :soil-moisture.unit/mm))
                         (text "~(vocab :mm s/lang)")))))

           (bs/form-group
             (bs/control-label :col [:sm label-cols] :for initial-soil-moistures-id
                               (text "~(vocab :initial-soil-moistures-label s/lang)"))
             (let [depth* (cell nil)
                   sm* (cell nil)
                   unit* (cell= (vocab (keyword ((fnil clojure.core/name "") initial-sm-unit)) s/lang))]
               (div
                 :col [:xs (min (+ value-cols 2) (- 12 label-cols))]
                 #_(p :toggle no-edit? :class "form-control-static" (text "~{irrigation-area}"))

                 (loop-tpl
                   :bindings [[row-no {db-id :db/id
                                       sm :soil/soil-moisture
                                       depth :soil/upper-boundary-depth}]
                              (cell= (util/indexed (sort-by :soil/upper-boundary-depth initial-soil-moistures)))]
                   (uie/create-soil-data-inputs
                     :fields {:row-no row-no
                              :row-action! #(s/delete-db-entity @db-id)
                              :unit unit*
                              :depth depth :depth! #(s/update-db-entity @db-id :soil/upper-boundary-depth %)
                              :value sm :value! #(s/update-db-entity @db-id :soil/soil-moisture % :value-type :double)}))
                 (uie/create-soil-data-inputs
                   :fields {:row-action! #(when (and @depth* @sm*)
                                           (s/create-new-soil-data-layer :db/id @db-id @depth* :sm @sm*)
                                           (reset! depth* nil)
                                           (reset! sm* nil))
                            :unit unit*
                            :depth depth* :depth! #(reset! depth* %)
                            :value sm* :value! #(reset! sm* %)})
                 ))))

         (fieldset
           (legend (text "~(vocab :technology-fieldset-label s/lang)"))

           (bs/form-group
             (bs/control-label :col [:sm label-cols] :for technology-select-id (text "~(vocab :technology-select-label s/lang)"))
             (div
               :col [:xs (min (+ value-cols 2) (- 12 label-cols))]
               (p :toggle no-edit? :class "form-control-static" "???Schlauchtrommel???" #_(text "~{}"))
               (select
                 :toggle edit?
                 :disabled "disabled"
                 :id technology-select-id
                 :class "form-control"
                 :on-change #()
                 (option "Schlauchtrommel")
                 (option "Tropfenbewässerung")
                 (option "Linearregner")
                 #_(loop-tpl
                   :bindings [{key :soil.stt/key
                               symbol :soil.stt/symbol
                               description :soil.stt/description
                               subs-groups :soil.stt/substrate-groups}
                              (cell= (sort-by :soil.stt/symbol s/stts))]
                   (option :value key
                           :selected (cell= (= key (:soil.stt/key stt)))
                           (text "~{symbol} | ~{description}"))))))

           (cell-let
             [{tec-db-id :db/id
               cycle-days :technology/cycle-days
               outlet-height :technology/outlet-height
               sprinkle-loss-factor :technology/sprinkle-loss-factor
               type :technology/type
               donation-min :donation/min
               donation-max :donation/max
               donation-opt :donation/opt
               step-size :donation/step-size
               } technology]

             (div
               :col [:xs 12]
               (technology/technology
                 :class "row"
                 :style "margin-top: 20px"
                 ;:toggle plot-annual-details-visible?
                 :fields {:db-id tec-db-id

                          :cycle-days cycle-days :cycle-days! #(s/update-db-entity @db-id :technology/cycle-days %)

                          :outlet-height outlet-height
                          :outlet-height! #(s/update-db-entity @db-id :technology/outlet-height %)

                          :sprinkle-loss-factor sprinkle-loss-factor
                          :sprinkle-loss-factor! #(s/update-db-entity @db-id :technology/sprinkle-loss-factor %)

                          :type type :type! #(s/update-db-entity @db-id :technology/type %)

                          :donation-min donation-min :donation-min! #(s/update-db-entity @db-id :donation/min %)

                          :donation-max donation-max :donation-max! #(s/update-db-entity @db-id :donation/max %)

                          :donation-opt donation-opt :donation-opt! #(s/update-db-entity @db-id :donation/opt %)

                          :step-size step-size :step-size! #(s/update-db-entity @db-id :donation/step-size %)}
                 :opts {:edit? true
                        :label-cols 2
                        :value-cols 3})))
           )

         (fieldset
           (legend (text "~(vocab :crop-instances-fieldset-label s/lang)"))

           (let [show-select (cell false)]

             (div
             :class "row"

             (div
               :col [:xs 2]
               (button
               ;:toggle no-edit?
               ;:style "float:right"
               :class "btn btn-warning"
               :click #(reset! show-select true)
               (text "~(vocab :new-crop-instance-button-label s/lang)")))

             (div
               :col [:xs 3]

               (select
                 :toggle show-select
                 :id new-crop-instance-id
                 :class "form-control"
                 :on-change #(do
                              (s/create-new-crop-instance @db-id (val-id new-crop-instance-id))
                              (reset! show-select false))
                 (option "")
                 (loop-tpl
                   :bindings [{id :crop/id
                               name :crop/name
                               symbol :crop/symbol}
                              (cell= (sort-by :crop/name s/minimal-all-crops))]
                   (option :value id
                           (text "~{symbol} | ~{name}")))))
             ))

           (hr)

           (loop-tpl
             :bindings [{ci-db-id :db/id
                         dc-assertions :crop.instance/dc-assertions
                         template-id :crop.instance/template
                         ci-name :crop.instance/name}
                        (cell= (sort-by #(apply min (map :assertion/abs-assert-dc-day (:crop.instance/assertions %)))
                                        crop-instances))]
             :bind-ids [ci-name-id dc-assertions-id]
             (fieldset
               :style "font-size: 18px; margin-left: 5%; width:95%"
               (legend (text "~{ci-name}"))

               (bs/form-group
                 (bs/control-label :col [:sm (+ 1 label-cols)] :for ci-name-id (text "~(vocab :ci-name-label s/lang)"))
                 (div
                   :col [:xs value-cols]
                   (p :toggle no-edit? :class "form-control-static" (text "~{ci-name}"))
                   (input
                     :id ci-name-id
                     :toggle edit?
                     :class "form-control"
                     :type "text"
                     :placeholder (cell= (vocab :ci-name-placeholder s/lang))
                     :value ci-name
                     :on-change #(s/update-db-entity @ci-db-id :crop.instance/name (val-id ci-name-id)))))

               (bs/form-group
                 (bs/control-label :col [:sm (+ 1 label-cols)] :for dc-assertions-id
                                   (text "~(vocab :dc-assertions-label s/lang)"))
                 (let [abs-day* (cell nil)
                       ;at-abs-day* (cell nil)
                       dc* (cell nil)
                       dc->names (cell= (get s/crop->dcs template-id))]
                   (div
                     :col [:xs (min (+ value-cols 4) (- 12 label-cols))]
                     #_(p :toggle no-edit? :class "form-control-static" (text "~{irrigation-area}"))

                     (loop-tpl
                       :bindings [[row-no {a-db-id :db/id
                                           abs-day :assertion/abs-assert-dc-day
                                           dc :assertion/assert-dc
                                           #_at-abs-day #_:assertion/at-abs-day}]
                                  (cell= (util/indexed (sort-by :assertion/abs-assert-dc-day dc-assertions)))]
                       (uie/create-dc-assertion-inputs
                         :fields {:row-no row-no
                                  :row-action! #(s/delete-db-entity @a-db-id)
                                  :dc->names dc->names
                                  :year year
                                  :abs-day abs-day :abs-day! #(s/update-db-entity @a-db-id :assertion/abs-assert-dc-day %)
                                  ;:at-abs-day at-abs-day :at-abs-day! #(s/update-db-entity @a-db-id :assertion/at-abs-day %)
                                  :dc dc :dc! #(s/update-db-entity @a-db-id :assertion/assert-dc %)}
                         #_:opts #_{:link-abs-days false
                                :hide-at-abs-day false}))
                     (uie/create-dc-assertion-inputs
                       :fields {:row-action! #(when (and @abs-day* @dc* #_@at-abs-day*)
                                               (s/create-new-dc-assertion @ci-db-id @abs-day* @dc* #_@at-abs-day*)
                                               (reset! abs-day* nil)
                                               (reset! dc* nil))
                                :dc->names dc->names
                                :year year
                                :abs-day abs-day* :abs-day! #(reset! abs-day* %)
                                ;:at-abs-day at-abs-day* :at-abs-day! #(reset! at-abs-day* %)
                                :dc dc* :dc! #(reset! dc* %)}
                       #_:opts #_{:link-abs-days false
                              :hide-at-abs-day false})
                     ))))))

         (fieldset
           (legend (text "~(vocab :donations-fieldset-label s/lang)"))

           (bs/form-group
             (bs/control-label :col [:sm label-cols] :for donations-id (text "~(vocab :donations-label s/lang)"))
             (let [abs-day* (cell nil)
                   amount* (cell nil)]
               (div
                 :col [:xs (min (+ value-cols 4) (- 12 label-cols))]
                 #_(p :toggle no-edit? :class "form-control-static" (text "~{irrigation-area}"))

                 (loop-tpl
                   :bindings [[row-no {don-db-id :db/id
                                       abs-day :donation/abs-day
                                       amount :donation/amount}]
                              (cell= (util/indexed (sort-by :donation/abs-day donations)))]
                   (uie/create-donation-inputs
                     :fields {:row-no row-no
                              :row-action! #(s/delete-db-entity @don-db-id)
                              :year year
                              :abs-day abs-day :abs-day! #(s/update-db-entity @don-db-id :donation/abs-day %)
                              :amount amount :amount! #(s/update-db-entity @don-db-id :donation/amount % :value-type :double)}))
                 (uie/create-donation-inputs
                   :fields {:row-action! #(when (and @abs-day* @amount*)
                                           (s/create-new-donation @db-id @abs-day* @amount*)
                                           (reset! abs-day* nil)
                                           (reset! amount* nil))
                            :year year
                            :abs-day abs-day* :abs-day! #(reset! abs-day* %)
                            :amount amount* :amount! #(reset! amount* %)})
                 ))))

         )) (dissoc attrs :fields :opts) kids)))