(page "berest.html"
      #_(:refer-clojure :exclude [repeat])
      (:require #_[ui.tabs :as tabs]
                [ajax.core :as ajax]
                [berest.helper :as bh :refer [rcomp partial-kw]]
                [berest.client.hoplon.rpc :as rpc]
                [berest.client.hoplon.berest-state :as state]
                [clojure.string :as str]
                [berest.client.hoplon.variance-charts :as vc]
                [berest.client.hoplon.apogee-charts :as ac]
                [apogee.charts :as acharts]
                [apogee.svg :as svg]
                [tailrecursion.hoplon.svg :as hsvg]
                [tailrecursion.hoplon.reload :refer [reload-all]]
                ))

#_(ns hoplon.index
  (:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require [ajax.core :as ajax]
            [tailrecursion.javelin :refer :all]
            [tailrecursion.hoplon :refer :all]))

(enable-console-print!)

;; Live-reload when we're local
#_(when (-> js/window .-location .-hostname (= "localhost"))
  (reload-all 1000))

(println "hostname: " (-> js/window .-location .-hostname))

(def server-url (condp = (-> js/window .-location .-hostname)
                  "" "http://localhost:3000/"
                  "localhost" "http://localhost:3000/"
                  "https://berest-zalflsa.rhcloud.com/"))

#_(println "server-url: " server-url)

(defc error-msg nil)
#_(cell= (println "error-msg: " error-msg))

(defc temp-irrigation-data [nil nil nil])
(defc edn-result nil)
#_(cell= (println "edn-result: " edn-result))

(defc csv-result nil)
#_(cell= (println "result: " csv-result))

(defc= farms (:farms state/state))
(defc= selected-farm (get farms (:selected-farm-id state/state)))
(defc= plots (:plots selected-farm))
(defc= selected-plot (get plots (:selected-plot-id state/state)))
(defc= until-date (:until-date state/state))
(defc= irrigation-data (:irrigation-data state/state))

(defn round [value & {:keys [digits] :or {digits 0}}]
  (let [factor (.pow js/Math 10 digits)]
    (-> value
        (* ,,, factor)
        (#(.round js/Math %) ,,,)
        (/ ,,, factor))))

(def sum (partial reduce + 0))

(defc= soil-moistures-7 (:soil-moistures-7 edn-result))
(defc= prognosis (:prognosis edn-result))
(defc= inputs (:inputs edn-result))
(defc= days (range (-> inputs first :abs-day) (-> inputs last :abs-day)))

(defc= soil-moistures
       (mapv (fn [{:keys [abs-day soil-moistures
                          irrigation-amount] :as all}]
               {:abs-day    abs-day
                :sm-0-10    (sum (subvec (vec soil-moistures) 0 2))
                :sm-10-30   (sum (subvec (vec soil-moistures) 2 4))
                :sm-30-60   (sum (subvec (vec soil-moistures) 4 7))
                :sm-60-100  (sum (subvec (vec soil-moistures) 7 11))
                :sm-100-150 (sum (subvec (vec soil-moistures) 11 16))
                ;:sm-0-30  (sum (subvec (vec soil-moistures) 0 4))
                ;:sm-30-60 (sum (subvec (vec soil-moistures) 4 7))
                ;:sm-60-90 (sum (subvec (vec soil-moistures) 7 10))}
                })
             soil-moistures-7))


#_(cell= (println "soil-moistures: " soil-moistures))
(cell= (when (not-empty soil-moistures) (vc/set-data "soil-moisture-chart" soil-moistures)))


#_(cell= (println "until-data: " until-date))
#_(cell= (println "session-token: " session-token))
(cell= (println "selected-farm-id: " (:farm/id selected-farm)))
(cell= (println "selected-plot-id: " (:plot/id selected-plot)))
#_(cell= (println "temp-irrigation-data: " temp-irrigation-data))


;; util

(defn date-str [date]
  (some-> date .toJSON (.split ,,, "T") first))

(defn is-leap-year [year]
  (= 0 (rem (- 2012 year) 4)))

(defn indexed [col]
  (->> col
       (interleave (range) ,,,)
       (partition 2 ,,,)))

(defn val-event [event]
  (-> event .-target .-value))


(defn remove-irrigation-row [row-no]
  (swap! state/state assoc :irrigation-data
         (->> @irrigation-data
              (keep-indexed #(when-not (= %1 row-no) %2) ,,,)
              (into [] ,,,))))

(defn add-irrigation-row [_]
  (swap! state/state update-in [:irrigation-data] conj @temp-irrigation-data)
  (reset! temp-irrigation-data [nil nil nil]))

(defn error-alert
  [error]
  (js/alert (str "Error: " error)))


#_(defn calculate-and-get-csv
  []
  (reset! csv-result nil)
  (ajax/GET (str server-url "auth-api/calculate")
            {:headers (request-headers "text/tab-separated-values" #_"text/csv")
             :params {:farm-id @selected-farm-id
                      :plot-id @selected-plot-id
                      :until-date (date-str @until-date)
                      :irrigation-data (prn-str @irrigation-data)}
             :response-format :raw
             :handler #(reset! csv-result %)
             :error-handler #(reset! error-msg "GET csv from auth-api/calculate failed")}))

#_(defn calculate-and-get-edn
  []
  (reset! edn-result nil)
  (ajax/GET (str server-url "auth-api/calculate")
            {:headers (request-headers)
             :params {:farm-id @selected-farm-id
                      :plot-id @selected-plot-id
                      :until-date (date-str @until-date)
                      :irrigation-data (prn-str @irrigation-data)}
             :response-format :edn
             :handler #(reset! edn-result %)
             :error-handler #(reset! error-msg "GET edn from auth-api/calculate failed")}))

#_(defn simulate-and-get-csv
  []
  (reset! csv-result nil)
  (ajax/GET (str server-url "auth-api/simulate")
            {:headers (request-headers "text/tab-separated-values" #_"text/csv")
             :params {:farm-id @selected-farm-id
                      :plot-id @selected-plot-id
                      :until-date (date-str @until-date)
                      :irrigation-data (prn-str @irrigation-data)}
             :response-format :raw
             :handler #(reset! csv-result %)
             :error-handler #(reset! error-msg "GET csv from auth-api/simulate failed")}))

#_(defn simulate-and-get-edn
  []
  (reset! edn-result "")
  (ajax/GET (str server-url "auth-api/simulate")
            {:headers (request-headers)
             :params {:farm-id @selected-farm-id
                      :plot-id @selected-plot-id
                      :until-date (date-str @until-date)
                      :irrigation-data (prn-str @irrigation-data)}
             :response-format :edn
             :handler #(reset! edn-result %)
             :error-handler #(reset! error-msg "GET edn from auth-api/simulate failed")}))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod tailrecursion.hoplon/do! :selected
  [elem key value]
  (let [e (js/jQuery elem)
        k (name key)]
    (cond
     (= false value) (.removeAttr e k)
     (= true value) (.attr e k k)
     :else (.attr e k (str value)))))

(defn create-option
  [value selected-value & [display-value]]
  (option :value value
          :selected (cell= (= value selected-value))
          (text "~(or display-value value)")))

(defn create-irrigation-inputs [row-no day month amount]
  (let [template? (nil? row-no)]
    (div
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Tag"
          :value day
          :data-id "day"
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [0] (val-event %))
                       (swap! state/state assoc-in [:irrigation-data @row-no 0] (val-event %)))))
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Monat"
          :value month
          :data-id "month"
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [1] (val-event %))
                       (swap! state/state assoc-in [:irrigation-data @row-no 1] (val-event %)))))
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Menge [mm]"
          :value amount
          :data-id "amount"
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [2] (val-event %))
                       (swap! state/state assoc-in [:irrigation-data @row-no 2] (val-event %)))))
      (input
        :class "btn btn-default"
        :type "button"
        :value (if template? "Zeile hinzuf√ºgen" "Zeile entfernen")
        :on-click (if template? add-irrigation-row (partial remove-irrigation-row @row-no))))))

(def chart-config
  {:x 50
   :y 50
   :width (cell 750)
   :height (cell 500)
   :x-domain [1 365]
   :y-left-domain [0 100]
   :y-right-domain [0 40]
   :grid-lines (cell= (/ (- 365 1) 10)),
   ;:label-points? false,
   ;:points []
   :major-grid-color (svg/rgb 255 255 255)
   :minor-grid-color (svg/rgb 245 245 245)
   :background-color (svg/rgb 225 225 225)
   :major-grid-width 2
   :minor-grid-width 1
   :axis-font-family "Verdana"
   :axis-font-size "12px"
   :axis-number-format 1
   :label-font-family "Verdana"
   :label-font-size "10px"
   :label-number-format 1})


#_(
(defc a 42)               ;; cell containing the number 42
(defc b '(+ 1 2))         ;; cell containing the list (+ 1 2)
(defc c (+ 1 2))          ;; cell containing the number 3
(defc d {:x @a})          ;; cell containing the map {:x 42}

(println "println a: " a " b: " b " c: " c " d: " d)
(cell= (println "cell= println a: " a " b: " b " c: " c " d: " d))

(defc= e {:x a})          ;; cell with formula {:x a}, updated when a changes
(defc= f (+ a 1))         ;; cell with formula (+ a 1), updated when a changes
(defc= g (+ a ~(inc @a))) ;; cell with formula (+ a 43), updated when a changes
(defc= h [e f g])         ;; cell with formula [e f g], updated when e, f, or g change

(println "println e: " e " f: " f " g: " g " h: " h)
(cell= (println "println e: " e " f: " f " g: " g " h: " h))


(def z {:cell (cell 1)})
(def z2 (:cell z))
#_(defc= x {:x (:cell z)})
(defc= x {:x z2})
(defc y 2)

(println "println z: " z " x: " x " y: " y)
(cell= (println "cell= println z: " z " x: " x " y: " y))
)

(defc width 750)
(defc height 500)

#_((def a {:cell (cell 1)})
(defc= x (:cell a))
(defc y 2)

(println "a: " a " x: " x " y: " y)
(cell= (println "a: " a " x: " x " y: " y))

(defn set-a [c]
  (set-cell!= (:cell a) c))

(set-a y)

(println ".. a:" a " x: " x " y: " y)
)

(defelem x [as cs]
  (let [_ (println "before this as: " as " cs: " cs)
        this (hsvg/svg :width width :height 200)
        _ (println "after this: " this)]
    (on-append! this
                (fn [as cs]
                  (println "attrs: " as " kids: " cs)
                  (add-attributes! this as)))
    this))

(defelem standard-xy-chart
  [{:keys [width height bg-color]} children]
  (ac/xy-chart
    :width (cell= (+ 120 width))
    :height height
    (ac/chart-background :background-color bg-color)
    (ac/chart-grid :orientation :horizontal)
    (ac/chart-grid :orientation :vertical)
    (ac/chart-axis :place :left)
    (ac/chart-axis :place :bottom)))

#_(rpc/init)
(state/test)
#_(state/login! "zalf" "fLAz")

(cell= (print (:trace state/error)))

(html ;:ng-app "myApp"
  (head
    (meta :name "viewport"
          :content "width=device-width, initial-scale=1"
          :charset "UTF-8")
    (link :rel "stylesheet" :href "css/bootstrap.css")
    #_(link :rel "stylesheet" :href "css/variance-base.css")
    #_(link :rel "stylesheet" :href "css/charts.css")

    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css")
    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css")
    #_(script :src "//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js")

    )


  (body

    (h1 (text "Hello, Hoplon and Castra! ~{rpc/random-number}"))
    (p (text "Look! It's a counter: ~{rpc/counter}"))

    #_(x :c 3 :d 4 (span "hello"))

    (p :css (cell= {:display (if (nil? error-msg) "none" "block")})
       :style "color:red"
       (text "Error: ~{error-msg}"))

    #_(button :click #(swap! height (partial + 10)) "add10")

    #_(standard-xy-chart
      :width width
      :height height
      :bg-color (ac/rgb 225 225 225))

    #_(ac/xy-chart
      :width (cell= (+ 120 width))
      :height height
      (ac/chart-background :background-color (ac/rgb 225 225 225))
      (ac/chart-grid :orientation :horizontal)
      (ac/chart-grid :orientation :vertical)
      (ac/chart-axis :place :left)
      (ac/chart-axis :place :bottom))


    (div
      :class "container"

      (h1 "BEREST Test client")
      (hr)

      (form
        :role "form"
        :class "form-horizontal"
        :name "test-data-form"

        (div
          :class "form-group"
          (label :for "farm-id" :class "col-sm-2 control-label" "Betrieb")
          (div
            :class "col-xs-3"
            (select
              :id "farm"
              :class "form-control"
              :on-change #(swap! state/state assoc :selected-farm-id (val-id "farm"))
              (loop-tpl :bindings [{fid  :farm/id
                                    name :farm/name} farms]
                        (create-option fid (:farm/id @selected-farm) name)))))

        (div
          :class "form-group"
          (label :for "plot" :class "col-sm-2 control-label" "Schlag")
          (div
            :class "col-xs-3"
            (select
              :id "plot"
              :class "form-control"
              :on-change #(swap! state/state assoc :selected-plot-id (val-id "plot"))
              (loop-tpl :bindings [{pid  :plot/id
                                    name :plot/name} plots]
                        (create-option pid (:plot/id @selected-plot) name)))))


        (div
          :class "form-group"
          (label :for "until-day" :class "col-sm-2 control-label" "Rechnen bis Datum")
          (div
            :class "col-xs-2"
            (input
              :id "until-date"
              :class "form-control"
              :type "date"
              :placeholder "Datum"
              :value (date-str @until-date)
              :on-change #(swap! state/state assoc :until-date (js/Date. (val-id "until-date"))))))


        (fieldset
          (legend "Beregnungsdaten")
          (div
            :class "form-group"
            (div :id "irrigation-data-list"
                 (loop-tpl :bindings [[row-no [day month amount]] (cell= (indexed irrigation-data))]
                           (create-irrigation-inputs row-no day month amount)))
            (apply create-irrigation-inputs nil (cell-map identity temp-irrigation-data))))

        #_(hr)

        #_(div
          :class "form-group"
          (div
            :class "col-sm-4"
            (a
              :class "btn btn-primary btn-lg"
              :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
              "Analyse Excel-File herunterladen")))

        (hr)

        (div
          :class "form-group"
          (label
            :for "result"
            :class "col-sm-4 control-label"
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              ;:on-click nil calculate-and-get-csv
              :value "Berechnen & CSV")
            (div :css {:height "5px"})
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              ;:on-click simulate-and-get-csv
              :value "Simulieren & CSV")
            (div :css {:height "5px"})
            (a
              :class "btn btn-primary btn-lg"
              :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
              "Analyse Excel-File herunterladen"))
          (div
            :class "col-xs-8"
            (textarea
              :id "result"
              :class "form-control"
              :rows "20" ;:cols "150"
              :placeholder "Berechnungsergebnis wird hier angezeigt werden ..."
              :value (cell= csv-result)))))

      (hr)

      #_(hsvg/svg
        (acharts/xy-plot))

      #_(ac/graph :id "d2plot"
                :data (cell= [{:days    days
                               :values  (map (rcomp (juxt :precipitation :evaporation)
                                                    (partial apply -)
                                                    (partial-kw round :digits 1))
                                             inputs)
                               :color-f #(if (< % 0) :red :blue)
                               :type    :bar
                               :assoc-y :right
                               :label   "N-V"
                               :unit    "mm"}])

                )




      #_(ac/xy-chart chart-config)


      #_(ac/graph :d2Plot [
                       {:const true
                        :horizontal 0
                        :assoc-y :left
                        :color :black}

                       {:days (->> inputs
                                   (filter (rcomp :qu-target
                                                  (partial < 0))
                                     ,,,)
                                   (map :abs-day ,,,))
                        :values (->> inputs
                                     (map :qu-target ,,,)
                                     (filter (partial < 0) ,,,)
                                     (map  (rcomp  (partial * 100)
                                                   (partial-kw bu/round :digits 1))
                                       ,,,))
                        :color :green
                        :assoc-y :left
                        :label "AET/PET S."
                        :unit "%"}

                       { :days (->> (rest sms-7*)
                                    (filter (rcomp :aet7pet
                                                   (partial < 0))
                                      ,,,)
                                    (map :abs-day ,,,))
                         :values (->> (rest sms-7*)
                                      (map :aet7pet ,,,)
                                      (filter (partial < 0) ,,,)
                                      (map  (rcomp  (partial * 100)
                                                    (partial-kw bu/round :digits 1))
                                        ,,,))
                         :color :goldenrod
                         :assoc-y :left
                         :label "AET/PET"
                         :unit "%"}

                       { :days days
                         :values (map  (rcomp  (juxt :precipitation :evaporation)
                                               (partial apply -)
                                               (partial-kw bu/round :digits 1))
                                       inputs)
                         :color-f #(if (< % 0) :red :blue)
                         :type :bar
                         :assoc-y :right
                         :label "N-V"
                         :unit "mm"}

                       { :days days
                         :values (->> inputs
                                      (map :irrigation-amount ,,,)
                                      (filter (partial < 0) ,,,)
                                      (map  (partial-kw bu/round :digits 1)
                                        ,,,))
                         :color :darkblue
                         :type :bar
                         :assoc-y :right
                         :label "Gabe" :unit "mm"}
                       ]
             :align-zero true)


      #_(div
        (h3 "Berechneter Bodenfeuchteverlauf")

        (button
          :class "btn btn-primary btn-lg"
          :click calculate-and-get-edn
          "Berechnen & Graph")

        (vc/chart
          :id "soil-moisture-chart"
          ;:map-xy "abs-day sm-0-30"
          :scale-x-linear "85 300"
          :scale-y-linear "0 100"
          #_(vc/debug-table)
          (vc/guide-y
            :class "right"
            (span :class "label" "{{value}} mm"))
          (vc/guide-x)
          #_(vc/line :id "line-sm-0-30" :map-xy "abs-day sm-0-30")
          #_(vc/line :id "line-sm-30-60" :map-xy "abs-day sm-30-60")
          #_(vc/line :id "line-sm-60-90" :map-xy "abs-day sm-60-90")
          (vc/line :id "line-sm-0-10" :map-xy "abs-day sm-0-10")
          (vc/line :id "line-sm-10-30" :map-xy "abs-day sm-10-30")
          (vc/line :id "line-sm-30-60" :map-xy "abs-day sm-30-60")
          (vc/line :id "line-sm-60-100" :map-xy "abs-day sm-60-100")
          (vc/line :id "line-sm-100-150" :map-xy "abs-day sm-100-150")
          (vc/points :id "irrigation" :map-xy "abs-day irrigation")
          ))


      #_(p "Nothing here {{'yet' + '!'}}")

      #_(div
        :id "sales-example"
        (vc/csv :id "quarterly-sales-csv"
                ;;{{
                quarter,sales
                Q1,493
                Q2,573
                Q3,639
                Q4,855
                ;;}}
                )


        (let [sales* (clj->js [{:quarter "Q1", :sales 493}
                               {:quarter "Q2", :sales 573}
                               {:quarter "Q3", :sales 639}
                               {:quarter "Q4", :sales 855}
                               {:quarter "Q5", :sales 1100}
                               {:quarter "Q6", :sales 200}
                               {:quarter "Q7", :sales 500}])]
          (button :click #(vc/set-data "testchart" sales*) "add sales"))

          #_#(reset! sales sales*)

        (h4 :style "text-align: center;" "Quarterly Sales ($USD)")

        (vc/chart
          :id "testchart"
          :style "width: 20.25rem; height: 13.25rem; margin: auto"
          ;:data #_"salesdata" "#quarterly-sales-csv"
          :scale-x-linear "0 1200"
          (vc/guide-x)
          (vc/repeat
            (vc/annotation :class "left" "{{quarter}}")
            (vc/dot :map-position "sales"))))


      #_(div :id "line-example"
           (link :id "temps"
                 :rel "variance-data"
                 :href "https://variancecharts.com/data/global_temp_fiveyear_mean.csv")

           (h3 "Change in Global Surface Temperature, 5 Year Mean")

           (vc/chart :data "#temps"
                     :map-xy "year five_year_mean"
                     :scale-x-linear "1882 2010"
                     :scale-y-linear "-0.5 0.8"
                     (vc/guide-y
                       (span :class "label" "{{value}}¬∞"))
                     (vc/guide-x)
                     (vc/line))))


    )

  )



