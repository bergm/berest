(page "berest.html"
      (:require #_[ui.tabs :as tabs]
       [de.zalf.berest.client.hoplon.helper :as bh :refer [rcomp partial-kw]]
       [de.zalf.berest.client.hoplon.util :as util]

       [de.zalf.berest.client.hoplon.berest.state :as s]
       [ui.elements :as uie]
       [clojure.string :as str]
                #_[tailrecursion.hoplon.svg :as hsvg]
       [tailrecursion.hoplon.reload :refer [reload-all]]
       ))

(enable-console-print!)

;; Live-reload when we're local
#_(when (-> js/window .-location .-hostname (= "localhost"))
  (reload-all 500))

(println "hostname: " (-> js/window .-location .-hostname))

(def server-url (condp = (-> js/window .-location .-hostname)
                  "" "http://localhost:3000/"
                  "localhost" "http://localhost:3000/"
                  "https://berest-zalflsa.rhcloud.com/"))
#_(println "server-url: " server-url)

(defc= lang (:language s/state))
(cell= (println "lang: " (pr-str lang)))

(defc temp-donations {:day nil :month nil :amount nil})
(defc edn-result nil)
#_(cell= (println "edn-result: " edn-result))

(defc= farms (:farms s/state))
(defc= selected-farm (get farms (:selected-farm-id s/state)))
(defc= plots (:plots selected-farm))
(defc= selected-plot (get plots (:selected-plot-id s/state)))
(defc= until-date (:until-date s/state))


(def sum (partial reduce + 0))

(defc= soil-moistures-7 (:soil-moistures-7 edn-result))
(defc= prognosis (:prognosis edn-result))
(defc= inputs (:inputs edn-result))
(defc= days (range (-> inputs first :abs-day) (-> inputs last :abs-day)))

(defc= soil-moistures
       (mapv (fn [{:keys [abs-day soil-moistures
                          irrigation-amount] :as all}]
               {:abs-day    abs-day
                :sm-0-10    (sum (subvec (vec soil-moistures) 0 2))
                :sm-10-30   (sum (subvec (vec soil-moistures) 2 4))
                :sm-30-60   (sum (subvec (vec soil-moistures) 4 7))
                :sm-60-100  (sum (subvec (vec soil-moistures) 7 11))
                :sm-100-150 (sum (subvec (vec soil-moistures) 11 16))
                ;:sm-0-30  (sum (subvec (vec soil-moistures) 0 4))
                ;:sm-30-60 (sum (subvec (vec soil-moistures) 4 7))
                ;:sm-60-90 (sum (subvec (vec soil-moistures) 7 10))}
                })
             soil-moistures-7))


;; util


#_(defn- make-elem-ctor [tag]
  (fn [& args]
    (apply (.createElement js/document tag) args)))

#_(def nav (make-elem-ctor "nav"))



(defn error-alert
  [error]
  (js/alert (str "Error: " error)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(s/login! "zalf" "fLAz")

#_(s/init)

(cell= (print (:trace s/error)))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:page-name {:lang/de "BEREST"
                       :lang/en "BEREST"}
           :signed-in-as {:lang/de "Eingeloggt als "
                          :lang/en "Signed in as "}
           :username {:lang/de "Nutzername"
                      :lang/en "Username"}
           :password {:lang/de "Passwort"
                      :lang/en "Password"}
           :all-farms {:lang/de "Alle Betriebe"
                       :lang/en "all farms"}
           :dwd-weather-stations {:lang/de "DWD Wetterstationen"
                                  :lang/en "DWD weather stations"}}
          [element (or lang :lang/de)] "UNKNOWN element"))


(html ;:ng-app "myApp"
  (head
    (meta :name "viewport"
          :content "width=device-width, initial-scale=1.0"
          :charset "UTF-8")
    (link :rel "stylesheet" :href "css/bootstrap.css")
    (link :rel "stylesheet" :href "//cdnjs.cloudflare.com/ajax/libs/moment.js/2.6.0/moment.min.js")
    (link :rel "stylesheet" :type "text/css" :href "bersim.css")
    #_(link :rel "stylesheet" :href "css/variance-base.css")
    #_(link :rel "stylesheet" :href "css/charts.css")

    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css")
    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css")
    #_(script :src "//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js")

    )


  (body
    (nav
      :class "navbar navbar-default"
      :role "navigation"
      (div
        :class "navbar-header"
        (button
          :type "button"
          :class "navbar-toggle"
          :data-toggle "collapse"
          :data-target ".navbar-collapse"
          (span :class "sr-only" "Toggle navigation")
          (span :class "icon-bar")
          (span :class "icon-bar")
          (span :class "icon-bar"))
        (a :class "navbar-brand" :href "/" (text "~(vocab :page-name lang)")))
      (div
        :class "collapse navbar-collapse"
        (ul
          :class "nav navbar-nav"
          (li (a :href "/home" "Home"))
          (li (a :href "" "other quick-link")))
        (div
          :do-toggle s/logged-in?
          :class "navbar-right"
          (p
            :class "navbar-text" (text "~(vocab :signed-in-as lang)")
            (strong (text "~(:user/full-name s/user) "))
            (button
              ;:href "javascript:void(0)"
              :class "btn btn-default navbar-btn"
              :on-click #(s/logout!)
              "Logout")))))

    (div
      :id "error"
      :on-click s/clear-error!
      :do-slide-toggle s/error
      (text "~(:message s/error)"))

    (div :id "loading" :do-fade-toggle s/loading? "loading...")

    (div
      :id "login-pane"
      :do-toggle s/show-login?
      :style "width : 50%"
      (form
        :id "login"
        :on-submit #(s/login! (val-id "user") (val-id "pwd"))
        :role "form"
        :class "form-horizontal"
        (div
          :class "form-group"
          (label :for "user" :class "col-sm-2 control-label"
                 (text "~(vocab :username lang)"))
          (div
            :class "col-xs-3"
            (input
              :id "user"
              :class "form-control"
              :type "text"
              :autofocus "autofocus")))

        (div
          :class "form-group"
          (label :for "pwd" :class "col-sm-2 control-label"
                 (text "~(vocab :password lang)"))
          (div
            :class "col-xs-3"
            (input
              :id "pwd"
              :class "form-control"
              :type "password")))

        (div :class "form-group"
             (div :class "col-sm-offset-2 col-xs-3"
                  (button
                    :class "form-control btn btn-primary btn-lg"
                    :type "submit" "Login")))))

    (div
      :id "content-pane"
      :do-toggle s/show-content?
      :class "container"
      :style "width:100%"

      (div
        :class "row"
        (div
          :id "navigation"
          :class "col-sm-2"
          (ul
            :class "nav nav-pills nav-stacked"
            (li :class (cell= {:active (= s/route "#/news")}) (a :href "#/news" "Aktuell"))
            (li :class (cell= {:active (= s/route "#/farms")}) (a :href "#/farms" "Betriebe"))
            (li :class (cell= {:active (= s/route "#/climate")}) (a :href "#/climate" "Klima"))
            (li :class (cell= {:active (= s/route "#/crops")}) (a :href "#/crops" "Fruchtarten"))
            (li :class (cell= {:active (= s/route "#/soils")}) (a :href "#/soils" "Boden"))
            (li :class (cell= {:active (= s/route "#/archive")}) (a :href "#/archive" "Archiv"))
            (li :class (cell= {:active (= s/route "#/settings")}) (a :href "#/settins" "Einstellungen"))
            (li :class (cell= {:active (= s/route "#/bersim")}) (a :href "#/bersim" "BERSIM"))))

        (div
          :id "main-content"
          :class "col-sm-10"

          (div
            :id "farms-pane"
            :toggle (cell= (= s/route "#/farms"))

            (div
              :id "farms"

              (loop-tpl
                :bindings [[_ {farm-id :farm/id
                               farm-name :farm/name
                               :as farm}] farms]
                ;:bind-ids [farm-id]
                (div
                  :id farm-id
                  (a :href (cell= (str "#/farms/" farm-id))
                     (text "~{farm-name}"))

                  (loop-tpl
                    :bindings [[_ {plot-id :plot/id
                                   plot-name :plot/name}] (cell= (:plots farm))]

                    (div
                      :id plot-id
                      (a :href (cell= (str "#/farms/" farm-id "/plots/" plot-id))
                         (text "~{plot-name}"))))

                  ))))


          (div
            :id "bersim-pane"
            :do-toggle (cell= (= s/route "#/bersim"))

            (form
              :role "form"
              :class "form-horizontal"
              :name "test-data-form"

              #_(uie/technology
                {:cycle-days (:cyle-days s/state) :set-cycle-days-fn #()})



              (div
                :class "form-group"
                (label :for "farm-id" :class "col-sm-2 control-label" "Betrieb")
                (div
                  :class "col-xs-3"
                  (select
                    :id "farm"
                    :class "form-control"
                    :on-change #(swap! s/state assoc :selected-farm-id (val-id "farm"))
                    (loop-tpl :bindings [[_ {fid :farm/id
                                             name :farm/name}] farms]
                              (uie/create-option fid (:farm/id @selected-farm) name)))))

              (div
                :class "form-group"
                (label :for "plot" :class "col-sm-2 control-label" "Schlag")
                (div
                  :class "col-xs-3"
                  (select
                    :id "plot"
                    :class "form-control"
                    :on-change #(swap! s/state assoc :selected-plot-id (val-id "plot"))
                    (loop-tpl :bindings [[_ {pid :plot/id
                                             name :plot/name}] plots]
                              (uie/create-option pid (:plot/id @selected-plot) name)))))


              (div
                :class "form-group"
                (label :for "until-day" :class "col-sm-2 control-label" "Rechnen bis Datum")
                (div
                  :class "col-xs-2"
                  (input
                    :id "until-date"
                    :class "form-control"
                    :type "date"
                    :placeholder "Datum"
                    :value (cell= (util/js-date-time->date-str until-date))
                    :on-change #(swap! s/state assoc :until-date (js/Date. (val-id "until-date"))))))


              (fieldset
                (legend "Beregnungsdaten")
                (div
                  :class "form-group"
                  (div :id "donations"
                       (loop-tpl :bindings [[row-no {:keys [day month amount]}] (cell= (util/indexed s/donations))]
                                 (uie/create-irrigation-inputs row-no day month amount)))
                  (apply uie/create-irrigation-inputs nil (cell-map (fn [[_ v]] v) temp-donations))))

              #_(hr)

              #_(div
                :class "form-group"
                (div
                  :class "col-sm-4"
                  (a
                    :class "btn btn-primary btn-lg"
                    :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
                    "Analyse Excel-File herunterladen")))

              (hr)

              (div
                :class "form-group"
                (label
                  :for "result"
                  :class "col-sm-4 control-label"
                  (input
                    :class "btn btn-primary btn-lg"
                    :type "button"
                    :on-click #(apply s/calculate-csv ((juxt :selected-plot-id :until-date :donations) @s/state))
                    :value "Berechnen & CSV")
                  (div :css {:height "5px"})
                  (input
                    :class "btn btn-primary btn-lg"
                    :type "button"
                    :on-click #(apply s/simulate-csv ((juxt :selected-plot-id :until-date :donations) @s/state))
                    :value "Simulieren & CSV")
                  (div :css {:height "5px"})
                  (a
                    :class "btn btn-primary btn-lg"
                    :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
                    "Analyse Excel-File herunterladen"))
                (div
                  :class "col-xs-8"
                  (textarea
                    :id "result"
                    :class "form-control"
                    :rows "20" ;:cols "150"
                    :placeholder "Berechnungsergebnis wird hier angezeigt werden ..."
                    :value (cell= s/csv-result))))))))

      (hr)



      )))



