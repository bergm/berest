(ns bersim
  (:require [berest.client.hoplon.bersim.state :as s]
            [ui.elements :as uie]))
(page "bersim.html"
      (:require #_[ui.tabs :as tabs]
       [berest.helper :as bh :refer [rcomp partial-kw]]
       [berest.client.hoplon.bersim.state :as s]
       [ui.elements :as uie]
       [clojure.string :as str]
       #_[tailrecursion.hoplon.svg :as hsvg]
       [tailrecursion.hoplon.reload :refer [reload-all]]
       ))

(enable-console-print!)

;; Live-reload when we're local
(when (-> js/window .-location .-hostname (= "localhost"))
  (reload-all 500))

(println "hostname: " (-> js/window .-location .-hostname))

(def server-url (condp = (-> js/window .-location .-hostname)
                  "" "http://localhost:3000/"
                  "localhost" "http://localhost:3000/"
                  "https://berest-zalflsa.rhcloud.com/"))
#_(println "server-url: " server-url)

(defc error-msg nil)
#_(cell= (println "error-msg: " error-msg))

(defc temp-donations {:day nil :month nil :amount nil})
(defc edn-result nil)
#_(cell= (println "edn-result: " edn-result))

(defc= farms (:farms s/state))
(defc= selected-farm (get farms (:selected-farm-id s/state)))
(defc= plots (:plots selected-farm))
(defc= selected-plot (get plots (:selected-plot-id s/state)))
(defc= until-date (:until-date s/state))

(defc= donations (:donations s/state))

(defn round [value & {:keys [digits] :or {digits 0}}]
  (let [factor (.pow js/Math 10 digits)]
    (-> value
        (* ,,, factor)
        (#(.round js/Math %) ,,,)
        (/ ,,, factor))))

(def sum (partial reduce + 0))

(defc= soil-moistures-7 (:soil-moistures-7 edn-result))
(defc= prognosis (:prognosis edn-result))
(defc= inputs (:inputs edn-result))
(defc= days (range (-> inputs first :abs-day) (-> inputs last :abs-day)))

(defc= soil-moistures
       (mapv (fn [{:keys [abs-day soil-moistures
                          irrigation-amount] :as all}]
               {:abs-day    abs-day
                :sm-0-10    (sum (subvec (vec soil-moistures) 0 2))
                :sm-10-30   (sum (subvec (vec soil-moistures) 2 4))
                :sm-30-60   (sum (subvec (vec soil-moistures) 4 7))
                :sm-60-100  (sum (subvec (vec soil-moistures) 7 11))
                :sm-100-150 (sum (subvec (vec soil-moistures) 11 16))
                ;:sm-0-30  (sum (subvec (vec soil-moistures) 0 4))
                ;:sm-30-60 (sum (subvec (vec soil-moistures) 4 7))
                ;:sm-60-90 (sum (subvec (vec soil-moistures) 7 10))}
                })
             soil-moistures-7))


;; util

(defn date-str [date]
  (some-> date .toJSON (.split ,,, "T") first))

(defn is-leap-year [year]
  (= 0 (rem (- 2012 year) 4)))

(defn indexed [col]
  (->> col
       (interleave (range) ,,,)
       (partition 2 ,,,)))

(defn val-event [event]
  (-> event .-target .-value))


(defn remove-donation-row [row-no]
  (swap! s/state assoc :donations
         (->> @donations
              (keep-indexed #(when-not (= %1 row-no) %2) ,,,)
              (into [] ,,,))))

(defn add-donation-row [_]
  (swap! s/state update-in [:donations] conj @temp-donations)
  (reset! temp-donations {:day nil :month nil :amount nil}))

(defn error-alert
  [error]
  (js/alert (str "Error: " error)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(s/login! "zalf" "fLAz")

(cell= (print (:trace s/error)))

(html ;:ng-app "myApp"
  (head
    (meta :name "viewport"
          :content "width=device-width, initial-scale=1"
          :charset "UTF-8")
    (link :rel "stylesheet" :href "css/bootstrap.css")
    (link :rel "stylesheet" :href "//cdnjs.cloudflare.com/ajax/libs/moment.js/2.6.0/moment.min.js")
    #_(link :rel "stylesheet" :href "css/variance-base.css")
    #_(link :rel "stylesheet" :href "css/charts.css")

    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css")
    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css")
    #_(script :src "//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js")

    )


  (body

    (p :css (cell= {:display (if (nil? error-msg) "none" "block")})
       :style "color:red"
       (text "Error: ~{error-msg}"))

    (div
      :class "container"

      (h1 "BERSIM")
      (hr)

      (form
        :role "form"
        :class "form-horizontal"
        :name "test-data-form"

        (uie/technology
          {:cycle-days (:cyle-days s/state) :set-cycle-days-fn #()})



        (div
          :class "form-group"
          (label :for "farm-id" :class "col-sm-2 control-label" "Betrieb")
          (div
            :class "col-xs-3"
            (select
              :id "farm"
              :class "form-control"
              :on-change #(swap! s/state assoc :selected-farm-id (val-id "farm"))
              (loop-tpl :bindings [[_ {fid  :farm/id
                                       name :farm/name}] farms]
                        (uie/create-option fid (:farm/id @selected-farm) name)))))

        (div
          :class "form-group"
          (label :for "plot" :class "col-sm-2 control-label" "Schlag")
          (div
            :class "col-xs-3"
            (select
              :id "plot"
              :class "form-control"
              :on-change #(swap! s/state assoc :selected-plot-id (val-id "plot"))
              (loop-tpl :bindings [[_ {pid  :plot/id
                                       name :plot/name}] plots]
                        (uie/create-option pid (:plot/id @selected-plot) name)))))


        (div
          :class "form-group"
          (label :for "until-day" :class "col-sm-2 control-label" "Rechnen bis Datum")
          (div
            :class "col-xs-2"
            (input
              :id "until-date"
              :class "form-control"
              :type "date"
              :placeholder "Datum"
              :value (cell= (date-str until-date))
              :on-change #(swap! s/state assoc :until-date (js/Date. (val-id "until-date"))))))


        (fieldset
          (legend "Beregnungsdaten")
          (div
            :class "form-group"
            (div :id "donations"
                 (loop-tpl :bindings [[row-no {:keys [day month amount]}] (cell= (indexed donations))]
                           (uie/create-irrigation-inputs row-no day month amount)))
            (apply uie/create-irrigation-inputs nil (cell-map (fn [[_ v]] v) temp-donations))))

        #_(hr)

        #_(div
          :class "form-group"
          (div
            :class "col-sm-4"
            (a
              :class "btn btn-primary btn-lg"
              :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
              "Analyse Excel-File herunterladen")))

        (hr)

        (div
          :class "form-group"
          (label
            :for "result"
            :class "col-sm-4 control-label"
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click #(apply s/calculate-csv ((juxt :selected-plot-id :until-date :donations) @s/state))
              :value "Berechnen & CSV")
            (div :css {:height "5px"})
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click #(apply s/simulate-csv ((juxt :selected-plot-id :until-date :donations) @s/state))
              :value "Simulieren & CSV")
            (div :css {:height "5px"})
            (a
              :class "btn btn-primary btn-lg"
              :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
              "Analyse Excel-File herunterladen"))
          (div
            :class "col-xs-8"
            (textarea
              :id "result"
              :class "form-control"
              :rows "20" ;:cols "150"
              :placeholder "Berechnungsergebnis wird hier angezeigt werden ..."
              :value (cell= s/csv-result)))))

      (hr)



      )))



